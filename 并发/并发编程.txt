并发编程


1，synchronized关键字的(基础)底层原理是什么？

//锁
synchronized(object) {

}

synchronized关键字，在底层编译后的jvm指令中，会有monitorenter和monitorexit两个指令

monitorenter 指加锁
monitorexit	指解锁


monitorenter指令执行的时候会干什么：
每个对象都有一个关联的monitor，比如一个对象实例就有一个monitor，一个类的Class对象也有一个monitor，如果要对这个对象加锁，那么必须获取这个对象关联的monitor的lock锁，
思路大概是：
monitor里面有一个计数器，从0开始的。如果一个线程要获取monitor的锁，就看看他的计数器是不是0，如果是0的话，那么说明没人获取锁，他就可以获取锁了，然后对计数器加1，
这个monitor的锁是支持重入加锁的
例如：
synchronized(object) { 
//第一次 
	synchronized(object) {
	//第二次
	}
}

走到第二次计数器就会变成2

如果出了synchronized修饰的代码片段的范围，就会有一个monitorexit的指令，在底层。此时获取锁的线程就会对那个对象的monitor的计数器减1，如果有多次重入加锁就会对应多次减1，直到最后，计数器是0



2，对CAS的理解以及其底层实现原理?
compare and set 
比较然后设置值

CAS在底层的硬件级别给你保证一定是原子的，同一时间只有一个线程可以执行CAS，先比较再设置，其他的线程的CAS同时间去执行此时会失败


3，ConcurrentHashMap实现线程安全的底层原理

jdk1.8以前数据结构是：数组，分段加锁，一个数组一个锁

jdk1.8以后，做了优化，锁的粒度细化
假设,多个线程同时操作Map但不是Map中的同一个数组,那么是没有关系的.如果是多个线程同时put操作Map中的一个数组,那么只有一个会成功,
其他都会失败,此时需要基于链表或红黑树来处理,使用synchronized对当前数组加锁,然后进行操作.所以只要不是同时操作同一个位置的元素就不会触发同步的串行化操作,性能不会受影响.

问：ConcurrentHashMap进行put操作的时候，元素为null，则进行cas,不为null，则进行synchronized同步，不为null的时候，为什么也不进行cas呢？

答案：当数组得位置存放得是链表或者红黑树得引用得时候,此时已经发生了一次哈希冲突了,讲道理,哈希冲突得概率有,但不是很高,链表里面得数据进行添加得时候,运用cas操作是比较麻烦得,
因为在多线程情况下往链表里面插数据是会报错得,这个时候只能采用sync锁来进行了.cas是比较后set,那对链表来讲,这个操作是实现不了的,链表在内存中不连续,节点的增加记录下上一个的位置就行,
cas操作跟谁比较,怎么比较,hashmap的entry是个单向链表,cas操作中链表的指针如果不为null,那就得到另一个地址在进行比较,在这个过程中,链表长度突破8,对于后续的转化红黑树的操作影响也是非常巨大的.
总的来讲,就是这个过程中进行cas的消耗,以及对编码的复杂度,都没有sync来的方便快捷,哈希冲突也是个小概率事件,对数组的不同位置加锁或者cas操作,已经完全够用了,

答案：元素不为null，当然不能走CAS，因为数组的元素实际上是一个链表或者红黑树的节点的引用，你要怎么对该节点直接CAS呢？只能先用synchronized（数组元素）锁住后，再对链表或者红黑树做增删操作

4，JDK中的AQS理解吗？AQS的实现原理是什么？
AQS的原理就是提供了一个volatile修饰的状态变量和一个双向的同步队列。
提供模板方法对于独占锁和共享锁的获取和释放，至于公平锁和非公平锁是它的实现类去覆盖抽象方法做的事情
总结： AQS的核心是被volatile修饰的state+双向链表Node+Condition单向队列
AQS有两种功能：独占和共享。 
独占锁，每次只能有一个线程持有锁，ReentrantLock就是以独占方式实现的互斥锁。 
共享锁，允许多个线程同时获取锁，并发访问共享资源，比如ReentrantLock。 
AQS队列内部维护的是一个FIFO的双向链表。 ReentrantLock内部类Sync继承自AQS，Sync有两个具体实现类，就是公平锁和非公平锁。
NofairSync非公平锁，存在抢占锁的功能，也就是说不管当前队列上是否存在其他线程等待，新线程都有机会抢占锁。 
FairSync公平锁，表示所有线程严格按照FIFO来获取锁


ReentrantLock  默认是false非公平锁 可以设置为true


























